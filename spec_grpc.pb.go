// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: spec.proto

package spec

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CookieStreamerClient is the client API for CookieStreamer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CookieStreamerClient interface {
	GetCookies(ctx context.Context, in *GetCookiesRequest, opts ...grpc.CallOption) (CookieStreamer_GetCookiesClient, error)
}

type cookieStreamerClient struct {
	cc grpc.ClientConnInterface
}

func NewCookieStreamerClient(cc grpc.ClientConnInterface) CookieStreamerClient {
	return &cookieStreamerClient{cc}
}

func (c *cookieStreamerClient) GetCookies(ctx context.Context, in *GetCookiesRequest, opts ...grpc.CallOption) (CookieStreamer_GetCookiesClient, error) {
	stream, err := c.cc.NewStream(ctx, &CookieStreamer_ServiceDesc.Streams[0], "/CookieStreamer/GetCookies", opts...)
	if err != nil {
		return nil, err
	}
	x := &cookieStreamerGetCookiesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CookieStreamer_GetCookiesClient interface {
	Recv() (*Cookie, error)
	grpc.ClientStream
}

type cookieStreamerGetCookiesClient struct {
	grpc.ClientStream
}

func (x *cookieStreamerGetCookiesClient) Recv() (*Cookie, error) {
	m := new(Cookie)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CookieStreamerServer is the server API for CookieStreamer service.
// All implementations must embed UnimplementedCookieStreamerServer
// for forward compatibility
type CookieStreamerServer interface {
	GetCookies(*GetCookiesRequest, CookieStreamer_GetCookiesServer) error
	mustEmbedUnimplementedCookieStreamerServer()
}

// UnimplementedCookieStreamerServer must be embedded to have forward compatible implementations.
type UnimplementedCookieStreamerServer struct {
}

func (UnimplementedCookieStreamerServer) GetCookies(*GetCookiesRequest, CookieStreamer_GetCookiesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCookies not implemented")
}
func (UnimplementedCookieStreamerServer) mustEmbedUnimplementedCookieStreamerServer() {}

// UnsafeCookieStreamerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CookieStreamerServer will
// result in compilation errors.
type UnsafeCookieStreamerServer interface {
	mustEmbedUnimplementedCookieStreamerServer()
}

func RegisterCookieStreamerServer(s grpc.ServiceRegistrar, srv CookieStreamerServer) {
	s.RegisterService(&CookieStreamer_ServiceDesc, srv)
}

func _CookieStreamer_GetCookies_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetCookiesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CookieStreamerServer).GetCookies(m, &cookieStreamerGetCookiesServer{stream})
}

type CookieStreamer_GetCookiesServer interface {
	Send(*Cookie) error
	grpc.ServerStream
}

type cookieStreamerGetCookiesServer struct {
	grpc.ServerStream
}

func (x *cookieStreamerGetCookiesServer) Send(m *Cookie) error {
	return x.ServerStream.SendMsg(m)
}

// CookieStreamer_ServiceDesc is the grpc.ServiceDesc for CookieStreamer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CookieStreamer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CookieStreamer",
	HandlerType: (*CookieStreamerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetCookies",
			Handler:       _CookieStreamer_GetCookies_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "spec.proto",
}
